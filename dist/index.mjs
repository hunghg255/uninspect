const w={clear:!0,debug:!0,debugTime:3e3,bfcache:!0},a={Chrome:0,Firefox:1,Safari:2},_=t=>t?t[0]!=="/"?`/${t}`:t:"/",l=t=>~navigator.userAgent.toLowerCase().indexOf(t),m=t=>typeof t=="string",h=(t,e)=>{if(e===a.Safari){location.replace(t);return}location.href=t};let p=0,s=0;const o=t=>{let e=0;const i=1<<p++;return()=>{s&&!(s&i)||(e++,e===2&&(s|=i,t(),e=1))}},T=t=>{const e=new Error;Object.defineProperty(e,"message",{get(){t()}}),console.log(e)},S=t=>{const e=/./;e.toString=o(t);const i=()=>e;i.toString=o(t);const r=new Date;r.toString=o(t),console.log("%c",i,i(),r);const c=o(t);T(c)},k=t=>{const e=/./;e.toString=t,console.log(e)},v=t=>{const e=new Image;Object.defineProperty(e,"id",{get:()=>{t(a.Safari)}}),console.log(e)};var y=Object.defineProperty,C=(t,e,i)=>e in t?y(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i,n=(t,e,i)=>(C(t,typeof e!="symbol"?e+"":e,i),i);class x{constructor(e){n(this,"_debug"),n(this,"_debugTime"),n(this,"_clear"),n(this,"_bfcache"),n(this,"_callback"),n(this,"_redirect"),n(this,"_write");const{clear:i,debug:r,debugTime:c,callback:b,redirect:f,write:g,bfcache:u}={...w,...e};this._debug=r,this._debugTime=c,this._clear=i,this._bfcache=u,this._callback=b,this._redirect=f,this._write=g}clear(){this._clear&&(console.clear=()=>{})}bfcache(){this._bfcache&&(window.addEventListener("unload",()=>{}),window.addEventListener("beforeunload",()=>{}))}debug(){if(this._debug){const e=new Function("debugger");setInterval(e,this._debugTime)}}redirect(e){const i=this._redirect;if(!i)return;if(i.indexOf("http")===0){location.href!==i&&h(i,e);return}const r=location.pathname+location.search;_(i)!==r&&h(i,e)}callback(){if(!this._callback&&!this._redirect&&!this._write||!window)return;const e=this.fire.bind(this),i=window.chrome||l("chrome"),r=l("firefox");if(i){S(e);return}if(r){k(e);return}v(e)}write(){const e=this._write;e&&(document.body.innerHTML=m(e)?e:e.innerHTML)}fire(e){if(this._callback){this._callback.call(null);return}this.redirect(e),!this._redirect&&this.write()}prepare(){this.clear(),this.bfcache(),this.debug()}ban(){this.prepare(),this.callback()}}const d=t=>{new x(t).ban()};typeof window<"u"&&(window.ConsoleBan={init:d});export{d as init};
